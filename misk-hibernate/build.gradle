import com.squareup.wire.WireCompiler

buildscript {
  dependencies {
    classpath dep.kotlinNoArgPlugin
  }
}

apply plugin: 'kotlin-jpa'

dependencies {
  compile dep.datasourceProxy
  compile dep.docker
  // The docker-java we use in tests depends on an old version of junixsocket that depends on
  // log4j. We force it up a minor version in packages that use it.
  compile('com.kohlschutter.junixsocket:junixsocket-native-common:2.1.1') {
    force = true
  }
  compile('com.kohlschutter.junixsocket:junixsocket-common:2.1.1') {
    force = true
  }
  compile dep.hibernateCore
  compile dep.hikariCp
  compile dep.hsqldb
  compile dep.mysql
  compile dep.openTracing
  compile dep.openTracingUtil
  compile dep.openTracingJdbc
  compile dep.vitess
  compile dep.tink
  compile project(':misk')
  compile project(':misk-crypto')

  testCompile project(':misk-testing')
  testCompile project(':misk-hibernate-testing')
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/0.x"
    outputFormat = 'gfm'
  }
}

def protosSrc = project.file("src/main/proto/")
def protosGenerated = project.file("$buildDir/classes/java/main/")

sourceSets {
  main.java.srcDirs += protosGenerated
}

task compileWire {
  doLast {
    def args = [
      "--proto_path=" + protosSrc,
      "--java_out=" + protosGenerated
    ]
    WireCompiler.main(args.toArray(new String[args.size()]))
  }
}

compileKotlin.dependsOn compileWire
